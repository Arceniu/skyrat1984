name: SS1984 Update Cached Rust
on:
  workflow_dispatch:
  pull_request_target:
    types:
      - closed
    branches:
      - master

permissions:
  contents: write

jobs:
  compile:
    runs-on: windows-latest
    timeout-minutes: 20

    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Generate App Token
        id: app-token-generation
        uses: actions/create-github-app-token@v2
        if: env.APP_PRIVATE_KEY != '' && env.APP_ID != ''
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
        env:
          APP_PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY }}
          APP_ID: ${{ secrets.APP_ID }}

      - name: Cache RUST_REMOTE folder
        uses: actions/cache@v4
        with:
          path: RUST_REMOTE # folder to cache
          key: rust_remote_repo_1984 # key for the cache
          restore-keys: |
            rust_remote_repo_1984
      - name: Setup part 7 (Rust Cache)
        uses: Swatinem/rust-cache@v2.8.0
        with:
          workspaces: |
            RUST_REMOTE
            RUST
          cache-all-crates: true
      - name: Disable skipping rust build
        shell: cmd
        run: |
          type nul > tools\build_rust_config.txt
      - name: Build RUST
        id: build_step
        shell: cmd
        run: |
          tools\build_rust_1984.bat
          IF %ERRORLEVEL% NEQ 0 (
              exit /b 220
          ) else (
              echo success=0 >> %GITHUB_OUTPUT%
          )

      - name: Set release tag variable
        if: steps.build_step.outputs.success == '0'
        run: echo "RELEASE_TAG=rust_cached" >> $GITHUB_ENV

      - name: Compute local file MD5
        id: localhash
        if: steps.build_step.outputs.success == '0'
        run:
          for /f "tokens=1" %%i in ('certutil -hashfile rust_1984.dll MD5 ^| findstr /v "hash"') do (
              set "localmd5=%%i"
          )
          echo md5=%localmd5% >> "%GITHUB_OUTPUT%"

      - name: Download existing release asset if exists
        id: download_asset
        if: steps.build_step.outputs.success == '0'
        run: |
          for /f "delims=" %%i in ('gh release view "%RELEASE_TAG%" --json id -q ".id"') do set "RELEASE_ID=%%i"
          for /f "delims=" %%a in ('gh api repos/%GITHUB_REPOSITORY%/releases/%RELEASE_ID%/assets --jq ".[] | select(.name==\"rust_1984.dll\") | .url"') do set "ASSET_URL=%%a"
          if defined ASSET_URL (
              gh api -H "Accept: application/octet-stream" %ASSET_URL% --output downloaded-file.dll
          )

      - name: Compute remote file MD5 if downloaded
        id: remotehash
        if: steps.build_step.outputs.success == '0'
        run: |
          if exist downloaded-file.dll (
              for /f "tokens=1" %%x in ('certutil -hashfile downloaded-file.dll MD5 ^| findstr /v "hash"') do set "remotemd5=%%x"
              echo md5=%remotemd5% >> "%GITHUB_OUTPUT%"
          ) else (
              echo md5=none >> "%GITHUB_OUTPUT%"
          )

      - name: Upload file if changed
        if: steps.localhash.outputs.md5 != steps.remotehash.outputs.md5 && steps.build_step.outputs.success == '0'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "$RELEASE_TAG" rust_1984.dll --clobber
